diff --git a/veritas/server.go b/veritas/server.go
index a5188ca..01c0bb9 100644
--- a/veritas/server.go
+++ b/veritas/server.go
@@ -7,9 +7,9 @@ import (
 	"sync"
 	"time"
 
+	"github.com/mediocregopher/radix/v3"
 	"github.com/patrickmn/go-cache"
 
-	"github.com/go-redis/redis/v8"
 	"github.com/golang/protobuf/proto"
 	"gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"
 
@@ -25,7 +25,7 @@ type server struct {
 
 	l *ledger.LogLedger
 
-	cli *redis.Client
+	cli *radix.Pool
 
 	puller *kafka.Consumer
 	pusher *kafka.Producer
@@ -44,12 +44,52 @@ type BlockPurpose struct {
 	approved map[string]struct{}
 }
 
-func NewServer(redisCli *redis.Client, consumer *kafka.Consumer, producer *kafka.Producer, ledgerPath string, config *Config) *server {
+func rediSQLGet(r *radix.Pool, key string) (string, error) {
+	var items []string
+	err := r.Do(radix.Cmd(
+		&items,
+		"REDISQL.EXEC",
+		"VERITAS",
+		fmt.Sprintf("SELECT kv.value FROM kv WHERE kv.key=\"%s\";", key),
+	))
+	if err != nil {
+		fmt.Printf("Get %v |%s|\n", err, key)
+		return "", err
+	}
+	return items[0], nil
+}
+
+func rediSQLSet(r *radix.Pool, key string, val string) error {
+	err := r.Do(radix.Cmd(
+		nil,
+		"REDISQL.EXEC",
+		"VERITAS",
+		fmt.Sprintf("INSERT INTO kv VALUES(\"%s\", \"%s\");", key, val),
+	))
+	if err != nil {
+		fmt.Printf("Set %v\n", err)
+	}
+	return err
+}
+
+func NewServer(redisCli *radix.Pool, consumer *kafka.Consumer, producer *kafka.Producer, ledgerPath string, config *Config) *server {
 	ctx, cancel := context.WithCancel(context.Background())
 	l, err := ledger.NewLedger(ledgerPath, true)
 	if err != nil {
 		log.Fatalf("Create ledger failed: %v", err)
 	}
+	// create RediSQL DB
+	if err := redisCli.Do(radix.Cmd(nil, "REDISQL.CREATE_DB", "VERITAS")); err != nil {
+		panic(err)
+	}
+	if err := redisCli.Do(radix.Cmd(
+		nil,
+		"REDISQL.EXEC",
+		"VERITAS",
+		"CREATE TABLE IF NOT EXISTS kv(key TEXT, value TEXT);",
+	)); err != nil {
+		panic(err)
+	}
 	s := &server{
 		ctx:      ctx,
 		cancel:   cancel,
@@ -117,10 +157,8 @@ func (s *server) applyLoop() {
 			LOOP:
 				for _, sl := range blk.Txs {
 					for _, t := range sl.Sets {
-						res, err := s.cli.Get(s.ctx, t.GetKey()).Result()
-						if err == redis.Nil {
-							continue
-						} else if err != nil {
+						res, err := rediSQLGet(s.cli, t.GetKey())
+						if err != nil {
 							log.Fatalf("Commit log %v get failed: %v", blk.Txs[0].GetSeq(), err)
 						}
 						v, err := Decode(res)
@@ -176,7 +214,7 @@ func (s *server) applyLoop() {
 					if err != nil {
 						log.Fatalf("Commit log %v encode failed: %v", blkBuf.blk.Txs[0].GetSeq(), err)
 					}
-					if err := s.cli.Set(s.ctx, t.GetKey(), entry, 0).Err(); err != nil {
+					if err := rediSQLSet(s.cli, t.GetKey(), entry); err != nil {
 						log.Fatalf("Commit log %v redis set failed: %v", blkBuf.blk.Txs[0].GetSeq(), err)
 					}
 					if _, ok := s.getCache.Get(t.Key); ok {
@@ -272,7 +310,7 @@ func (s *server) Get(ctx context.Context, req *pbv.GetRequest) (*pbv.GetResponse
 	if v, ok := s.getCache.Get(req.Key); ok {
 		return &pbv.GetResponse{Value: v.(string)}, nil
 	}
-	res, err := s.cli.Get(ctx, req.GetKey()).Result()
+	res, err := rediSQLGet(s.cli, req.GetKey())
 	if err != nil {
 		return nil, err
 	}
